/**
 * @packageDocumentation
 * @module api.functional.bossRaid
 * @nestia Generated by Nestia - https://github.com/samchon/nestia 
 */
//================================================================
import { Fetcher } from "nestia-fetcher";
import type { IConnection } from "nestia-fetcher";
import TSON from "typescript-json";

import type { IBossRaidUsecase } from "./../../../../src/api/boss-raid/application/port/boss-raid.usecase.port";

export * as topRankerList from "./topRankerList";

/**
 * 보스 레이드 상태 조회
 * 
 * @tag boss-raid
 * @returns 보스 레이드 상태 조회 결과
 * 
 * @controller BossRaidController.getState()
 * @path GET /bossRaid
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export function getState
    (
        connection: IConnection
    ): Promise<getState.Output>
{
    return Fetcher.fetch
    (
        connection,
        getState.ENCRYPTED,
        getState.METHOD,
        getState.path()
    );
}
export namespace getState
{
    export type Output = IBossRaidUsecase.GetStateResponse;

    export const METHOD = "GET" as const;
    export const PATH: string = "/bossRaid";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export function path(): string
    {
        return `/bossRaid`;
    }
}

/**
 * 보스 레이드 시작
 * 
 * @tag boss-raid
 * @param connection connection Information of the remote HTTP(s) server with headers (+encryption password)
 * @param body 입장 유저 정보 및 레벨 정보
 * @returns 레이드 시작 정보
 * 
 * @controller BossRaidController.enter()
 * @path POST /bossRaid/enter
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export function enter
    (
        connection: IConnection,
        body: IBossRaidUsecase.Enter
    ): Promise<enter.Output>
{
    return Fetcher.fetch
    (
        connection,
        enter.ENCRYPTED,
        enter.METHOD,
        enter.path(),
        body,
        enter.stringify
    );
}
export namespace enter
{
    export type Input = IBossRaidUsecase.Enter;
    export type Output = IBossRaidUsecase.EnterResponse;

    export const METHOD = "POST" as const;
    export const PATH: string = "/bossRaid/enter";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export function path(): string
    {
        return `/bossRaid/enter`;
    }
    export const stringify = (input: Input) => TSON.stringify(input);
}

/**
 * 보스 레이드 종료
 * 
 * @tag boss-raid
 * @param connection connection Information of the remote HTTP(s) server with headers (+encryption password)
 * @param body 종료할 유저 및 레코드 정보
 * @returns 없음
 * 
 * @controller BossRaidController.end()
 * @path PATCH /bossRaid/end
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export function end
    (
        connection: IConnection,
        body: IBossRaidUsecase.End
    ): Promise<void>
{
    return Fetcher.fetch
    (
        connection,
        end.ENCRYPTED,
        end.METHOD,
        end.path(),
        body,
        end.stringify
    );
}
export namespace end
{
    export type Input = IBossRaidUsecase.End;

    export const METHOD = "PATCH" as const;
    export const PATH: string = "/bossRaid/end";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export function path(): string
    {
        return `/bossRaid/end`;
    }
    export const stringify = (input: Input) => TSON.stringify(input);
}